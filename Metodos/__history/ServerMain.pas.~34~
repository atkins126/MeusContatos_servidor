unit ServerMain;

interface

uses System.SysUtils, System.Classes, Datasnap.DSServer, Datasnap.DSAuth,
  System.JSON;

type
{$METHODINFO ON}
  TServerMethods1 = class(TComponent)
  private
    { Private declarations }
    procedure FormatarJSON(const AIDCode: Integer; const AContent: string);
  public
    { Public declarations }
    function EchoString(Value: string): string;
    function ReverseString(Value: string): string;
    Function Contatos : tjsonarray;
    Function UpdateContatos : TJSONArray;
    Function AcceptContatos : TJSONArray;
    Function CancelContatos : tJsonArray;
  end;

  Main = class (TServerMethods1);
{$METHODINFO OFF}

implementation


uses System.StrUtils, Data.DBXPlatform, Contatos2.model.interfaces,
  Contatos2.model.contatos, Web.HTTPApp, Datasnap.DSHTTPWebBroker,
  Contatos2.entidade.contatos;

function TServerMethods1.AcceptContatos: TJSONArray;
var modulo : twebmodule;
   contatos : tcontatos;
   Contato : iModelContatos;
begin
   modulo := GetDataSnapWebModule;
   if modulo.Request.Content.IsEmpty then
    begin
      Result := TJSONArray.Create('Mensagem', 'Erro!');
      FormatarJSON(204, result.ToString);
      abort;
    end;
   Result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(Modulo.Request.Content), 0) as TJSONArray;
   Contatos := Tcontatos.Create;
   try
     Contatos.id       := Result.Items[0].GetValue<integer>('Id');
     Contatos.nome     := Result.Items[0].GetValue<string>('Nome');
     contatos.telefone := Result.Items[0].GetValue<string>('Fixo');
     contatos.Celular  := Result.Items[0].GetValue<string>('Celular');
     Contatos.Email    := Result.Items[0].GetValue<string>('Email');
     Contato := tmodelcontatos.Create;
     if contato.Editar(contatos) = true then
      begin
       Result := TJSONArray.Create('Mensagem', 'Ok');
       FormatarJSON(200, result.ToString);
      end
     else
      begin
       Result := TJSONArray.Create('Mensagem', 'Erro!');
       FormatarJSON(204, result.ToString);
      end;
   finally
      FreeAndNil(Contatos);
   end;
end;

function TServerMethods1.CancelContatos: tJsonArray;
var modulo : twebmodule;
   contatos : tcontatos;
   Contato : iModelContatos;
begin
   modulo := GetDataSnapWebModule;
   if modulo.Request.Content.IsEmpty then
    begin
      Result := TJSONArray.Create('Mensagem', 'Erro!');
      FormatarJSON(204, result.ToString);
      abort;
    end;
   Result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(Modulo.Request.Content), 0) as TJSONArray;
   Contatos := Tcontatos.Create;
   try
     Contatos.id       := Result.Items[0].GetValue<integer>('Id');
     Contatos.nome     := Result.Items[0].GetValue<string>('Nome');
     contatos.telefone := Result.Items[0].GetValue<string>('Fixo');
     contatos.Celular  := Result.Items[0].GetValue<string>('Celular');
     Contatos.Email    := Result.Items[0].GetValue<string>('Email');
     Contato := tmodelcontatos.Create;
     if contato.Remover(contatos.id) = true then
      begin
       Result := TJSONArray.Create('Mensagem', 'Ok');
       FormatarJSON(200, result.ToString);
      end
     else
      begin
       Result := TJSONArray.Create('Mensagem', 'Erro!');
       FormatarJSON(204, result.ToString);
      end;
   finally
      FreeAndNil(Contatos);
   end;
end;

function TServerMethods1.Contatos: tjsonarray;
var Contatos : imodelcontatos;
begin
   Contatos := tmodelcontatos.Create;
   if Contatos.JSON.Count > 0 then
    begin
     Result := Contatos.JSON;
     FormatarJSON(200, Result.ToString);
    end
   else
    begin
     Result := TJSONArray.Create(TJSONObject.Create(TJSONPair.Create('Mensagem', 'Nenhum contato encontrado.')));
     FormatarJSON(203, Result.ToString);
    end;
end;

function TServerMethods1.EchoString(Value: string): string;
begin
  Result := Value;
end;

procedure TServerMethods1.FormatarJSON(const AIDCode: Integer;
  const AContent: string);
begin
  GetInvocationMetadata().ResponseCode    := AIDCode;
  GetInvocationMetadata().ResponseContent :=  AContent;
end;

function TServerMethods1.UpdateContatos: TJSONArray;
var modulo : twebmodule;
   contatos : tcontatos;
   Contato : iModelContatos;
begin
   modulo := GetDataSnapWebModule;
   if modulo.Request.Content.IsEmpty then
    begin
      Result := TJSONArray.Create('Mensagem', 'Erro!');
      FormatarJSON(204, result.ToString);
      abort;
    end;
   Result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(Modulo.Request.Content), 0) as TJSONArray;
   Contatos := Tcontatos.Create;
   try
     Contatos.nome     := Result.Items[0].GetValue<string>('Nome');
     contatos.telefone := Result.Items[0].GetValue<string>('Fixo');
     contatos.Celular  := Result.Items[0].GetValue<string>('Celular');
     Contatos.Email    := Result.Items[0].GetValue<string>('Email');
     Contato := tmodelcontatos.Create;
     if contato.Novo(contatos) = true then
      begin
       Result := TJSONArray.Create('Mensagem', 'Ok');
       FormatarJSON(200, result.ToString);
      end
     else
      begin
       Result := TJSONArray.Create('Mensagem', 'Erro!');
       FormatarJSON(204, result.ToString);
      end;
   finally
      FreeAndNil(Contatos);
   end;
end;

function TServerMethods1.ReverseString(Value: string): string;
begin
  Result := System.StrUtils.ReverseString(Value);
end;
end.

